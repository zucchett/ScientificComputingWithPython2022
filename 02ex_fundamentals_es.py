# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZAEnupP2STdPPck7oqoVq0Z0PTUS0flO
"""

#02ex_fundamentals_es01
x = 5
def fn(alist):
    alist = [1, 2, 3]
    for i in range(x):
        alist.append(i)
    return alist

alist = [1, 2, 3]
ans = fn(alist)
print(ans)

#02ex_fundamentals_es02
print([i * i for i in range(10) if i % 2 == 1])

#02ex_fundamentals_es03
x = ['Ciao' , 'salve' , 'arrivederci' , 'buongiorno' , 'buonasera' , 'hi' , 'hello' , 'goodbye' , 'goodmorning' , 'bye']
n= 5
ans = list(map(lambda i: x[i] , filter(lambda i: len(x[i]) <= n , range(len(x)))))
print(ans)

#02ex_fundamentals_es04
lang = {"Python" : 3, "Java" : '', "Cplusplus" : 'test', "Php" : 0.7}

new_list =list(map( lambda x: len(x), lang.keys()))
print(new_list)

#02ex_fundamentals_es05
language_scores = [('Python', 97), ('Cplusplus', 81), ('Php', 45), ('Java', 32)]
language_scores = sorted(language_scores, key=lambda x: x[0])
print(language_scores)

#02ex_fundamentals_es06 

square = (lambda x: x**2)
cube = (lambda x: x**3)
power_6 = (lambda x : cube(square(x))) 
print(power_6(10))

#02ex_fundamentals_es07
def hello(fn):
    def wrapper(x):
        print("Hello World")
        fn(x)  
    return wrapper
@hello
def square(x):
    print(x*x)
square(10)

#02ex_fundamentals_es08
def R_fibonacci(n):
    if n <= 1:
        return n
    return R_fibonacci(n-1) + R_fibonacci(n-2)
print([R_fibonacci(i) for i in range(20)])

#02ex_fundamentals_es09
import timeit

def r_fib(n):
    if n < 2:
        return 1
    return r_fib(n-1) + r_fib(n-2)

def while_fib(n):
    count , a , b , list_1 = 0 , 0 , 1 , []
    while count <= n-1:
        a,b = b,a+b
        count += 1
        list_1.append(a)
    print(f"\n the Fibonacci sequence:{list_1}\n")

starttime1 = timeit.default_timer()
while_fib(20)
print("\ntime of while loop is :" , timeit.default_timer() - starttime1)

starttime2 = timeit.default_timer()
print([r_fib(i) for i in range(20)])
print("\n time of recursion function is :" , timeit.default_timer() - starttime2)
# result = while loop is more efficient than recursion

#02ex_fundamentals_es10

#02ex_fundamentals_es11