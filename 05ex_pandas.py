# -*- coding: utf-8 -*-
"""05ex_pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GRMFjdgR6yZLDVq4kx7vO54tH3I-xKxx

1\. **Pandas DataFrame**

This exercise consists in analyzing a dataset containg timing information from a series of Time-to-Digital-Converters (TDC) implemented in a pair of FPGAs. Each measurement (i.e. each row of the input file) consists of a flag that specifies the type of message ('HEAD', which in this case is always 1), two addresses of the TDC providing the signal ('FPGA' and 'TDC_CHANNEL'), and the timing information ('ORBIT_CNT', 'BX_COUNTER', and 'TDC_MEAS'). Each TDC count corresponds to 25/30 ns, whereas a unit of BX_COUNTER corresponds to 25 ns, and the ORBIT_CNT is increased every `x` BX_COUNTER. This allows to store the time in a similar way to hours, minutes and seconds.
"""

# If haven't downloaded it yet, please get the data file with wget
!wget https://www.dropbox.com/s/xvjzaxzz3ysphme/data_000637.txt -P ./data/

"""1\. Create a Pandas DataFrame reading N rows of the `data/data_000637.txt` dataset. Choose N to be smaller than or equal to the maximum number of rows and larger that 10k (check the documentation)."""

import pandas as pd
filename= "./data/data_000637.txt"
n=9000 
pandas_dataframe= pd.read_csv(filename,nrows=n)
print(pandas_dataframe)

"""2\. Estimate the number of BX in a ORBIT (the value `x`).

*Hint*: check when the BX counter reaches the maximum value before being reset to 0.
"""

x=pandas_dataframe["BX_COUNTER"].max()
print("MAXIMUM OF BX_COUNTER ==>>",x)

"""3\. Create a new column with the absolute time in ns (as a combination of the other three columns with timing information) since the beginning of the data acquisition, and convert the new column to a Time Series."""

import datetime

absolute_times=[]
for a,row in pandas_dataframe.iterrows():
    timing= (row["TDC_MEAS"]+ row["BX_COUNTER"]+ row["ORBIT_CNT"])
    absolute_times.append(timing)

pandas_dataframe["ABS_TIMES"]=absolute_times
print("NEW COLUMN ==>>\n",pandas_dataframe)

time_series=pd.to_datetime(pandas_dataframe["ABS_TIMES"], unit="ns")
print("TIME SERIES ==>>\n",time_series)

"""4\. Find out the duration of the data taking in hours, minutes and seconds, by using the features of the Time Series. Perform this check reading the whole dataset."""

pandas_dataframe= pd.read_csv(filename)
absolute_times=[]
for a,row in pandas_dataframe.iterrows():
    timing= (row["TDC_MEAS"]+ row["BX_COUNTER"]+ row["ORBIT_CNT"])
    absolute_times.append(timing)
    
pandas_dataframe["ABS_TIME"]= pd.to_timedelta(absolute_times)
print("DURATION ==>>\n",pandas_dataframe.head(30))

"""5\. Use the `.groupby()` method to find out the noisy channels, i.e. the TDC channels with most counts (print to screen the top 3 and the corresponding counts)"""

counting=pandas_dataframe.groupby("TDC_CHANNEL").count()
n=3  
noisy_channels=counting.sort_values(by="HEAD",ascending=False).iloc[0:n]
print(noisy_channels)

"""6\. Count the number of non-empty orbits (i.e. the number of orbits with at least one hit)."""

print("THE NUMBER OF NON-EMPTY ORBITS ARE ==>>",len(pandas_dataframe.groupby("ORBIT_CNT").count()))

"""7\. Count the number of unique orbits with at least one measurement from TDC_CHANNEL=139."""

print("THE UNIQUE ORBITS WITH AT LEAST ONE MEASURMENT WITH TDC_CHANNEL=139 ARE ==>>",len(pandas_dataframe[pandas_dataframe["TDC_CHANNEL"]==139].groupby("ORBIT_CNT").count()))

"""8\. Create two Series (one for each FPGA) that have the TDC channel as index, and the number of counts for the corresponding TDC channel as values."""

FPGA1 = pd.Series(pandas_dataframe[pandas_dataframe['FPGA']==1]['TDC_CHANNEL'].value_counts())
print("THE FPGA1 ==>>\n", FPGA1)

FPGA2 = pd.Series(pandas_dataframe[pandas_dataframe['FPGA']==2]['TDC_CHANNEL'].value_counts())
print("THE FPGA2 ==>>\n", FPGA2)

"""9\. **Optional:** Create two histograms (one for each FPGA) that show the number of counts for each TDC channel."""

import matplotlib.pyplot as plt

fig, (ax1, ax2, ) = plt.subplots(1, 2,)

ax1.hist(FPGA1)
ax1.set_title('FPGA1')
ax1.set_xlabel('TDC channel')
ax1.set_ylabel('Count')

ax2.hist(FPGA2)
ax2.set_title('FPGA2')
ax2.set_xlabel('TDC channel')
ax2.set_ylabel('Count')