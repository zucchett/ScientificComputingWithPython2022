# -*- coding: utf-8 -*-
"""02ex_introduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/112wePE5gPVnnT7FwHj1hM-FTQyVhGlPm

1. Global variables

Convert the function
into a function that doesn't use global variables and that does not modify the original list
"""

x=5
def f(alist,z):
  b=list(alist)
  for i in range(z):
      b.append(i)
  return b

alist = [1, 2, 3]
ans = f(alist,x)
print(ans)
print(alist) # alist has been changed

"""2. List comprehension


"""

ans=[x*x for x in range (10) if x%2==1]
print(ans)

"""3. Filter list
Using the filter() hof, define a function that takes a list of words and an integer n as arguments, and returns a list of words that are shorter than n.
"""

def f (s,n):
 c=(list(filter(lambda x:len(x)<n, s)))
 return c

s=["helllop","worlfddd","wefw"]
n=5
p=f(s,n)
print(p)

"""4. Map dictionary



"""

lang = {"Python" : 3, "Java" : '', "Cplusplus" : 'test', "Php" : 0.7}
def f (lang):
 p=(list(map(lambda x:len(x),lang.keys())))
 return p
p=f(lang)
print(p)

"""5. Lambda functions

Write a Python program that sorts the following list of tuples using a lambda function, according to the alphabetical order of the first element of the tuple:
"""

language_scores = [('Python', 97), ('Cplusplus', 81), ('Php', 45), ('Java', 32)]

newList = sorted(language_scores, key = lambda x : x[0])
print(newList)

"""6. Nested functions

Write two functions: one that returns the square of a number, and one that returns its cube.

Then, write a third function that returns the number raised to the 6th power, using only the two previous functions.
"""

def sixpow (x):
    def square (x):
        return x**2
    def cube (x):
        return x**3
    return square(cube(x))

print(sixpow(2))

"""7. Decorators

Write a decorator named hello that makes every wrapped function print “Hello World!” each time the function is called.

The wrapped function should look like:

@hello
def square(x):
    return x*x
"""

def hello(func):
    def wrapper(*args):
        print("Hello World!")
        rev = func(*args)
        return rev
    return wrapper
        
@hello
def square(x):
    return x*x
square(2)

"""8. The Fibonacci sequence (part 2)

Calculate the first 20 numbers of the Fibonacci sequence using a recursive function.
"""

t = 20
def refibo(n):
   if n <= 1:
       return n
   else:
       return(refibo(n-1) + refibo(n-2))

for i in range(t):
   print (refibo(i))

"""9. The Fibonacci sequence (part 3)

Run both the Fibonacci recursive function from the previous exercise, and the Fibonacci function from 01ex that use only for and while loops.

Measure the execution code of the two functions with timeit (link to the doc), for example:

%timeit loopFibonacci(20)

%timeit recursiveFibonacci(20)

which one is the most efficient implementation? By how much?
"""

# Commented out IPython magic to ensure Python compatibility.
def fibo2(n) :
    n=n
    def refibo(n):
        if n<=1:
            return n
        else:
            return(refibo(n-1)+ refibo(n-2))
    for i in range(n):
        o=refibo(i)
        print(o)

def fibo1(t):
    n=0
    a=0
    b=1
    while n<t:
     print(a)
     x=a+b
     a=b
     b=x
     n += 1

print('execution for loop: ')
%timeit fibo1(20)
print('executaion for recur fun')
%timeit fibo2(20)

"""10. Class definition

Define a class polygon. The constructor has to take a tuple as input that contains the length of each side. The (unordered) input list does not have to have a fixed length, but should contain at least 3 items.

Create appropriate methods to get and set the length of each side

Create a method perimeter() that returns the perimeter of the polygon

Create a method getOrderedSides(increasing = True) that returns a tuple containing the length of the sides arranged in increasing or decreasing order, depending on the argument of the method

Test the class by creating an instance and calling the perimeter() and getOrderedSides(increasing = True) methods.
"""

class polygon:
    side = ()
    def __init__(self, side):
        if (len(side) < 3):
            print("at least three sides are needed")
            return
        else:
            self.side = side
   
    def gl (self):
        return self.side
   
    def ls (self, l):
        if (len(l) != len(self.side)):
            print("needed side length is",len(self.side))
            return
        else:
            self.side = l
           
    def perimeter(self):
        s=sum(self.side)
        return s

   
    def getOrderedSides (self, increasing = True):
        self.side = tuple(sorted(self.side, reverse = not increasing))
        return self.side
   
   


t2 = (8, 3, 5, 1, 5)
p = polygon(t2)
print(p.perimeter())
print(p.getOrderedSides(False))
l = (23, 42, 28, 18,12)
p.ls(l)
print(p.gl())

c=(1,2)
p=polygon(c)

class rectangle (pol)

"""

11. Class inheritance

Define a class rectangle that inherits from polygon. Modify the constructor, if necessary, to make sure that the input data is consistent with the geometrical properties of a rectangle.

    Create a method area() that returns the area of the rectangle.

Test the rectangle class by creating an instance and passing an appropriate input to the constructor.
"""

class rectangle (polygon):
      def __init__ (self, length, width):
          turec = (length, length, width, width)
          polygon.__init__(self, turec)
        
      def area (self):
          return self.side[0] * self.side[1]
    
b = rectangle(8, 4)
print(b.area())
print(b.gl())
print(b.getOrderedSides(True))