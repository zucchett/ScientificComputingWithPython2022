# -*- coding: utf-8 -*-
"""06ex_OSEMN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14bOHFgenzLA3YnY-OgRTgsRT8omY85bo
"""

import pandas as pd
import numpy as np

"""1\. **Text files**

Perform the following operations on plain `txt` files:

+ create a list of integrer numbers and then save it to a text file named `data_int.txt`. Run the `cat` command to print the content of the file.
+ create a matrix of 5x5 floats and then save it to a text file named `data_float.txt`. Use the `cat` command to print the content of the file.
+ load the `txt` file of the previous point and convert it to a `csv` file by hand.
"""

#NUMBER 1: TEXT FILES EXERCISE

import random
intlist = []
for i in range(0, 40):
    numbers = random.randint(0, 10)
    intlist.append(numbers)
with open('data_int.txt', 'w') as file:
    file.write('\n'.join(str(number) for number in intlist))

!cat data_int.txt

matrix = np.random.rand(5, 5)
fl = np.matrix(matrix)
with open('data_float.txt', 'w') as file:
    for row in fl:
        np.savetxt(file, row)

!cat data_float.txt

import csv

with open('data_float.txt', 'r') as file:
    load = (line.strip() for line in file)
    lines = (line.split(",") for line in load if line)
    with open('data_float.csv', 'w') as out_file:
        writer = csv.writer(out_file)
        writer.writerow(('SUBJECT', 'INTRODUCTION'))
        writer.writerows(lines)

"""2\. **JSON files**

Load the file *user_data.json*, which can be found at:

- https://www.dropbox.com/s/sz5klcdpckc39hd/user_data.json

and filter the data by the "CreditCardType" when it equals to "American Express". Than save the data to a new CSV file.
"""

#NUMBER 2: JSON FILES EXERCISE

import json

info = json.load(open('user_data.json'))
filter_data = [x for x in info if x['CreditCardType'] == 'American Express']
output = json.dumps(filter_data)
print(output)

newformat = pd.DataFrame(eval(output))
newformat.to_csv('user_data.csv', index=False,header=True)

"""3\. **CSV files with Pandas**

Load the file from this url:

- https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv

with Pandas. 

+ explore and print the DataFrame
+ calculate, using `groupby()`, the average value of each feature, separately for each class
+ save the file in a JSON format.
"""

#NUMBER 3: CSV FILES WITH PANDAS EXERCISE

import pandas as pd

data = pd.read_csv("mushrooms_categorized.csv")
calculation = data.groupby('class') 
print(calculation.mean())

calculation.mean().reset_index().to_json('mushrooms_categorized.json')

"""4\. **Reading the credit card numbers**

Get the binary file named *credit_card.dat* from this address:

- https://www.dropbox.com/s/8m0syw2tkul3dap/credit_card.dat

and convert the data into the real credit card number, knowing that:
- each line corresponds to a credit card number, which consists of 16 characters (which are numbers in the 0-9 range) divided in 4 blocks, with a whitespace between each block
- each character is written using a 6 bit binary representation (including the whitespace)
- the final 4 bits of each line are a padding used to determine the end of the line, and can be ignored

*Hint*: convert the binary numbers to the decimal representation first, and then use the `chr()` function to convert the latter to a char
"""

#NUMBER 4: READING THE CREDIT CARD NUMBERS EXERCISE

binary_file = "credit_card.dat"
print("Credit card numbers: \n")

with open(binary_file, 'r') as binary_file:
    for line in binary_file:
        print(''.join([chr(int(line[i:i+6],2)) for i in range(0, len(line), 6)]))

"""5\. **Write data to a binary file**

a) Start from the `data/data_000637.txt` file that we have used during the previous lectures, and convert it to a binary file according to the format defined below:
"""

#NUMBER 5: WRITE DATA TO A BINARY FILE EXERCISE

from IPython.display import Image
Image("images/data_format.png")


import pandas as pd
import struct

data_pd = pd.read_csv('data_000637.txt', nrows = 10)
print(data_pd)

file_name = 'binary_file.dat'
with open(file_name, 'wb') as binary_file:
    for line in data.values: 
        word = (line[5] << 0 ) 
        word += (line[4] << 5 ) 
        word += (line[3] << 17) 
        word += (line[2] << 49) 
        word += (line[1] << 58)
        word += (line[0] << 62)
        
        binary_file.write(struct.pack('<q', word))

data1 = {}
columns = ['HEAD', 'FPGA', 'CHANNEL', 'ORBIT_CNT', 'BX_CNT', 'TDC_MEAS']
df = pd.DataFrame({}, columns=columns)

with open('binary_file.dat', 'rb') as file:
    file_content = file.read()
    counter = 0
    word_size = 8  
    for i in range(0, len(file_content), word_size):
        counter += 1
        if counter > 10: break
        word = struct.unpack('<q', file_content[i : i + word_size])[0] 
        head     = (word >> 62) & 0x3
        fpga     = (word >> 58) & 0xF
        tdc_chan = (word >> 49) & 0x1FF
        orb_cnt  = (word >> 17) & 0xFFFFFFFF
        bx       = (word >> 5 ) & 0xFFF
        tdc_meas = (word >> 0 ) & 0x1F
        entries = {'HEAD' : head, 'FPGA' : fpga, 'CHANNEL' : tdc_chan, 'ORBIT_CNT' : orb_cnt, 'BX_CNT' : bx, 'TDC_MEAS' : tdc_meas}
        dataframe = df.append(entries, ignore_index=True)
print(dataframe)

import os

path = r'data_000637.txt'
size = os.path.getsize(path)
print(f'{path} SIZE ARE', size, 'BYTES')

path1 = r'binary_file.dat'
size = os.path.getsize(path1)
print(f'{path1} SIZE ARE', size, 'BYTES')
print(f'DIFFERENCES ARE', ((os.path.getsize(path))-(os.path.getsize(path1))), 'BYTES')

"""*Hints*:
- Read the first 10 lines using Pandas
- Iterate over the DataFrame rows
- For every row, ``pack'' the values (features) into a single 64-bit word, according to the format specified above. Use bit-wise shifts and operators to do so.
- Write each 64-bit word to a binary file. You can use `struct` in this way:
```
binary_file.write( struct.pack('<q', word) )
```
where `word` is the 64-bit word.
- Close the file after completing the loop.

b) Check that the binary file is correctly written by reading it with the code used in the lecture `06_OSEMN.ipynb`, and verify that the content of the `txt` and binary files is consistent.

c) What is the difference of the size on disk between equivalent `txt` and binary files?
"""