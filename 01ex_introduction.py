# -*- coding: utf-8 -*-
"""Exercise 01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FvQWtFn_URAzJnCjmSrsy6r9jBaH0rnX

# 1. HelloWorld Replacement (a)
"""

for i in range (1, 101):
  if i % 15 == 0:
    print("HelloWorld")
  elif i % 3 == 0:
    print("Hello")
  elif i % 5 == 0:
    print("World")
  else:
    print(i)

"""# 1. HelloWorld Replacement (b)"""

tuple_count = ()

for i in range (1, 101):
  if i % 15 == 0:
    tuple_count += ("PythonWorks",)
  elif i % 3 == 0:
    tuple_count += ("Python",)
  elif i % 5 == 0:
    tuple_count += ("Works",)
  else:
    tuple_count += (str(i),)

print(tuple_count)

"""# 2. The Swap"""

x, y = input("enter x and y divided by a space:").split(' ')
y, x = x, y
print("new x: " + x + "\n" + "new y: " + y)

"""# 3. Computing the Distance"""

import math

def euclidean_diff(u, v):
  x = float(u[0]) - float(v[0])
  y = float(u[1]) - float(v[1])

  dist = math.sqrt(x**2 + y**2)
  
  return dist

u = tuple(input('Enter space-separated coordinathions: ').split())
v = tuple(input('Enter space-separated coordinathions: ').split())



print(euclidean_diff(u, v))

"""# 4. Counting Letters"""

s1 = "Write a program that prints the numbers from 1 to 100. \
But for multiples of three print Hello instead of the number and for the multiples of five print World. \
For numbers which are multiples of both three and five print HelloWorld."
s2 = "The quick brown fox jumps over the lazy dog"

def c(s):
  
  count = {}

  for i in s:
    if i in count:
      count[i] += 1
    else:
      count[i] = 1

  return (count)

print("s1: \n" , c(s1) , "\n s2: \n" , c(s2) )

"""# 5. Isolating the unique"""

l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,
 85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,
 1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,
 45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20]

count = 0

repeated = []

unique = []

for i in l:

  if ( (i not in unique) and (i not in repeated)):
    unique.append(i)
    count += 1
       
  elif (i not in repeated):
    unique.remove(i)
    repeated.append(i)
    count -= 1

  else:
    continue

print(unique, count)

"""# 6. Casting"""

x, y = input("input two variables seperated by a space:").split(' ')

def type_checker(a):
  try:
    a_int = int(a)
    return int
  except ValueError:
    try:
      a_float = float(a)
      return float
    except ValueError:
      return str
    
    
if (type_checker(x) == type_checker(y)):
  print(type_checker(x)(x) + type_checker(y)(y))

else:
  print("the variables are not compatible")

"""# 7. Cubes(a)"""

cubes = []

for i in range(0, 11):
  cubes.append(i**3)

print(cubes)

"""# 7. Cubes(b)"""

cubes = [(i**3) for i in range(0, 11)]
print(cubes)

"""#8. List comprehension

"""

print( [(x, y) for x in range(3) for y in range(4)] )

"""#9. Nested list comprehension"""

def pythagoreanTriplets(maximum) :
  #the mathematics are at https://en.wikipedia.org/wiki/Formulas_for_generating_Pythagorean_triples
  c, m = 0, 2
  list_pyth = []
  while c < maximum :	
    for n in range(1, m) :
      a = m * m - n * n
      b = 2 * m * n
      c = m * m + n * n

      if c > maximum :
        break

      
      list_pyth.append((a, b, c))

    m = m + 1
    
  return list_pyth


pythagoreanTriplets(100)

"""#10. Normalization of a N-dimensional vector



"""

import math
input_vector = input('input a vector and separate the elements by space').split(' ')

def norm(v):

  sum = 0
  for i in v:
    i = float(i)
    sum += i**2

  len = math.sqrt(sum)

  normalized_vector = []

  for i in input_vector:
    i = float(i)
    normalized_vector.append(i/len)

  return normalized_vector

print(norm(input_vector))

"""#11. The Fibonacci sequence"""

fib = [1, 1]

for i in range(18):
  fib.append(fib[i] + fib[i+1])

print(fib)