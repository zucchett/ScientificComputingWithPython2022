# -*- coding: utf-8 -*-
"""02ex_fundamentals.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z5ZprngW_SC6vH2a0Nd3ywFcaeLvDvLD

ex1
"""

x = 5

def f(alist):
    lis1=[]
    for j in alist:
      lis1.append(j)
    for i in range(x):
        lis1.append(i)
    return lis1

alist = [1, 2, 3]
ans = f(alist)
print(ans)
print(alist) # alist has been changed

"""ex2"""

ans = list(map(lambda x: x * x, filter(lambda x: x % 2 == 1, range(10))))
print(ans)

lis1=[x**2 for x in range(10) if x%2==1]
print(lis1)

"""ex 3

"""

list2=[]
def myfunc(m):
  for i in range(m):
    list2.append(input('enter the words'))
  print(list2)
def cal(x): 
  if len(x)<n:
    return True
  else:
    return False
n=int(input('enter the limit'))
m=int(input('enter the lenght of the list'))
myfunc(m)
l=filter(cal,list2)
for s in l:
    print(s)

"""ex4"""

lang = {"Python" : 3, "Java" : '', "Cplusplus" : 'test', "Php" : 0.7}
lis=[]
i=0
def myfunc(x):
  return x
t=map(myfunc,lang)
for j in t:
  lis.append(len(j))
print(lis)

"""ex5
without lambda
"""

language_scores = [('Python', 97), ('Cplusplus', 81), ('Php', 45), ('Java', 32)]
l=[]
def myfunc(x):
  l.append(x[0])
for i in language_scores:
  l.append(i[0])
print(tuple(sorted(l)))

"""with lambda"""

language_scores = [('Python', 97), ('Cplusplus', 81), ('Php', 45), ('Java', 32)]
l=[]
for i in language_scores:
  l.append(list(i))
t=map(lambda x:x[0],language_scores)
sort=sorted(t)
print(tuple(sort))

"""ex6"""

def square(x):
  return x**2
def cube(x):
  return x**3
def sixpower(x):
  return cube(square(x))
sixpower(2)

"""ex 7"""

def hello(func):
    def wrapped():
        func()
    return wrapped

@hello
def hello_world():
    print ("Hello World!")
    
hello_world()

"""ex8"""

def fibonatchi(n):
   if n <= 1:
       return n
   else:
       return(fibonatchi(n-1) + fibonatchi(n-2))

number = 20


print(" sequence:")
for i in range(number):
  print(fibonatchi(i))

"""ex 9

"""

import timeit
import time
mysetup = "from math import sqrt"
recursivemethod='''def fibonatchi(n):
   if n <= 1:
       return n
   else:
       return(fibonatchi(n-1) + fibonatchi(n-2))

fibonatchi(20)
'''

loopmethod='''def fib(n):
    a = 1
    b = 1
    if n == 1:
        print(a)
    else:
       
        for i in range(2,n):
            c = a + b
            a = b
            b = c
        return(c)
fib(20)'''
print('runtime with loop :')
print(timeit.timeit(stmt =loopmethod,number = 10))
print('runtime with recursive method :')
print(timeit.timeit(stmt =recursivemethod
,number = 10))



"""in small numbers(n=10) recursive method is faster, but in large number of n loop is faster."""

import timeit
import time
mysetup = "from math import sqrt"
recursivemethod='''def fibonatchi(n):
   if n <= 1:
       return n
   else:
       return(fibonatchi(n-1) + fibonatchi(n-2))

fibonatchi(20)
'''

loopmethod='''def fib(n):
    a = 1
    b = 1
    if n == 1:
        print(a)
    else:
       
        for i in range(2,n):
            c = a + b
            a = b
            b = c
        return(c)
fib(20)'''
print('runtime with loop :')
print(timeit.timeit(stmt =loopmethod,number = 10000))
print('runtime with recursive method :')
print(timeit.timeit(stmt =recursivemethod
,number = 10000))

"""ex 10"""

class polygon():
  def __init__(self,numberOfSides):
     self.numberOfSides=numberOfSides
  list1=[]
  increas=None
  decreas=None
  def set_Sides(self):
    print("input the length of sides")
    for i in range(self.numberOfSides):
      sideLength=int(input("enter"))
      self.list1.append(sideLength)
    return(self.list1)


  def get_sides(self):
    sideNumber=int(input('enter the side number'))
    return self.list1[sideNumber-1]
  def set_eachside(self):
    sideNumber=int(input('enter the side number to set'))
    sideValue=int(input('enter the new length '))
    self.list1[sideNumber-1]=sideValue
    print('new side  set')
  def perimeter(self):
    total=0
    for i in range(len(self.list1)):
      total=total+self.list1[i]
    return total


  def getOrderedSides(self,increasing):
    x=sorted(self.list1)
    if increasing==True:
      print(x)
    else:
      print(list(reversed(x)))

class polygon():
  def __init__(self,numberOfSides):
     self.numberOfSides=numberOfSides
  list1=[]
  increas=None
  decreas=None
  def set_Sides(self):
    print("input the length of sides")
    for i in range(self.numberOfSides):
      sideLength=int(input("enter"))
      self.list1.append(sideLength)
    return(self.list1)


  def get_sides(self):
    return self.list1
  def perimeter(self):
    total=0
    for i in range(len(self.list1)):
      total=total+self.list1[i]
    return total
  def getOrderedSides(self,increasing):
    x=sorted(self.list1)
    if increasing==True:
      print(x)
    else:
      print(list(reversed(x)))

y=polygon(4)
y.set_Sides()

y.get_sides()

y.perimeter()

y.getOrderedSides(False)

"""make new object from polygon class and enter the set the sides of our shape with set_Sides() method."""

t=polygon(4)
t.set_Sides()

"""get special side's length with get_sides() method which receive a number and return the side."""

t.get_sides()

"""with set_eachsede() method we can modify each side'length and save it."""

t.set_eachside()
print(t.list1)

"""the primeter method calculate the perimeter of shape and returns it."""

t.perimeter()

"""the getOrderSides method receive one argument which is a boolian ,
it is false it means in
"""

t.getOrderedSides(False)

"""ex 11
defining rectangle class which inherite from polygon class with new constructore that check the seides to be correct for rectangle.
"""

class rectangle(polygon):
  def __init__(self,):
     self.numberOfSides=4
  list1=[]
  increas=None
  decreas=None
  def set_Sides(self):
    print("input the length of sides")
    for i in range(self.numberOfSides):
      sideLength=int(input("enter"))
      self.list1.append(sideLength)
      rectangleSides=sorted(self.list1)
    if rectangleSides[0]!=rectangleSides[1] and rectangleSides[2]!=rectangleSides[3]:
      print('please input valid sides for rectangle')
      self.list1=[]
      self.set_Sides()
    return(self.list1)
  def area(self):
    #return(int((sorted(self.list1)[0]))*(int(sorted(self.list1[2]))))
    print(sorted(self.list1)[0]*sorted(self.list1)[2])

"""create an object from tectangle class and calculate the area with areamethod"""

y=rectangle()
y.set_Sides()

y.area()